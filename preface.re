= はじめに

== データベースシステムとは

データベースは、データの集まりで、特に整理整頓されているデータを指すこ
とが多いです。データベースを扱うときは、その中に含まれるデータを検索し
たり、追加、編集、削除したり、まとめて集計加工をします。

ひとりで使うデータベースであれば、Excel などの表計算ソフトでも足りるこ
とが多いと思います。複数人で、組織で、Web サービスで、ひとつのデータベー
スを管理したい場合は、もっと良い方法があります。それがデータベースシス
テムを使うことです。

データベースシステムといったとき、皆さんは具体的にどんなソフトウェアを
思い浮べるでしょうか？オープンソースのデータベースシステムだけとっても、
MySQL、PostgreSQL など、商用だと Oracle、DB2、SQL Server、Google
Spannar など、たくさんあります。これらは SQL という操作インターフェー
スを供えており、トランザクション処理が可能です。また、大量のデータを加
工、集計する処理も、規模や状況によりますが可能です。

もう少し広い範囲でも見てみることにします。Hadoop や Spark などは、細か
い単位でのデータ操作、とりわけトランザクション処理には対応していない代
わりに、SQL SELECT 文の実行、つまり、データを大量に加工、集計する用途
に特化しています。また、ひとつのホストでは保持できない程の大量のデータ
を扱えるように、複数のホストをまたがって動作する分散システムです。etcd
などは、設定情報を分散システムで安全に共有する目的で使われることが多い
データベースシステムですが、Key-value store に分類されます。Key-value
store は細かい違いはありますが、主に key を指定して、value を検索、操
作する、SQL よりも単純なインターフェースを持っています。同様の
key-value store として、memcached や Redis などは、データの永続化をあ
る程度犠牲にしてでも、高速に処理したいデータを扱う目的で使われることが
多いようです。

以上のように、目的、用途に応じて様々なデータベースシステムがあります。



== トランザクション処理

本書では、上記で紹介した様々なデータベースシステムが持っている機能の中
で、トランザクション処理を対象とします。トランザクション処理は、世の中
になくてはならない処理のひとつです。皆さんが銀行 ATM でお金を入出金し
たり、送金したりする度に、裏でトランザクションが実行されます。ATM での
操作が「きちんと」実行されないと困りますよね。また、皆さんがインターネッ
ト上の販売サイトで何かを購入するときに、決済(支払い)の画面で、決済ボタ
ンを押す度に、裏でトランザクションが実行されます。これらの操作も「きち
んと」処理してくれないと困りますよね。お金のやりとりにはほぼ必須ですが、
それに限らず様々なやりとりでトランザクション処理は必要とされています。
世の中には「きちんと」処理してくれないと困る処理が多いからです。「きち
んと」がどういう意味を持つかについて理解するには、ACID の理解が必要と
なります。分からない方、興味を持った方は自分で調べてみてください。

トランザクション処理の重要性について書きましたが、本書が書かれた一番の理由は、
著者が、トランザクション処理をおもしろい、と思っているからです。


== トランザクション処理を学ぶべき人

アルゴリズムとデータ構造を学ぶのがおもしろいと思う方は、
トランザクション処理もおもしろいと感じる適性が間違いなくあると思います。
何故ならトランザクション処理は、メモリ上、ディスク上で、様々なデータ構造を必要とし、
その操作に伴うアルゴリズムを必要とするからです。
並列プログラミングが大好きな人も、トランザクション処理の性能を高めるために、
それを駆使する必要があるので、楽しいと思います。


== 本書の目的

本書によって、データベースシステム、とりわけトランザクション処理の大まかな仕組みを理解し、
作る側の人間になれる人を増やしたいと思っています。

データベースシステムという大きな枠組みを考えると、
SQL やその最適化、それに伴う様々なデータ処理アルゴリズム、
それらの分散処理、レプリケーション、などたくさんあります。

SQL についての情報はたくさんあります。本もたくさん出ています。
それはデータベースシステムを使う人のための知識で、データベースシステムを使う人はたくさんいるからです。
また、アプリケーションを設計実装する人達は、一般に、単に良い性質を持つ一連のデータベース操作として
トランザクションを設計するだけで済むことが多いと思います。
それほどトランザクションという概念のもたらす抽象化は良く出来ていると思います。
トランザクションは万能であるけれども、その皺寄せはトランザクション処理を実行する
データベースシステムに来ているのです。
データベースシステムを作れるであろう人は、私が思うに少ないです。
もちろん、使う人ほど多くなくていいですが、作る人がもっといて欲しいなと思います。
さらに、データベースシステムの作り方を教える人も少ないと思います。
というわけで、微力ではありますが多少の心得がある私が本書を書くことにより、
多少なりとも目的に向かえたらなと思っているわけです。


== 本書で学べること


本書はトランザクションを処理する仕組みについて実際にプログラムを作ることを通して学んでもらいます。
(注意: まだ本書を読んだだけで多くの人が動くプログラムを作れるほど説明が分かりやすく充実していないと思われます。)

トランザクションを実行するのに必要な主な仕組みは、メモリ上およびディスク上のデータ構造に加えて、
ログ先行書き込み (Write-ahead logging, WAL) と並行実行制御(Concurrency Control) です。

私がおもしろく、そして難しいと思うところは、トランザクションを並列に実行するための、
様々な仕組みです。Concurrency Control がまずそれにあたります。
Concurrency Control とひとくちに言っても様々な手法がありますが、
S2PL という手法が基本中の基本だと思ってもらって良いと思います。
ただ、Concurrency Control をデータベースシステム上で実現するにあたって、
複数の CPU コアを使って複数のスレッド/プロセスでトランザクションを並列に実行する場合、
複数スレッド/プロセスからひとつのデータ構造にアクセスする状況が発生するので、
いわゆる並列プログラミングと言われている技術が必要になります。
具体的には lock や latch などデータの適切な排他を行う仕組みが、
場合によっては、lock-free だとか mutex-free と呼ばれているような技術もです。

皆さん次第ではありますが、これらの技術的に難易度が高めの能力を前提としてしまうのは、
本書の目的に必ずしも沿わないと思います。


そこで、並列処理にチャレンジする前に到達して欲しいマイルストーンとして、
シングルスレッドで、基本的なトランザクション処理ができるデータベースシステムの
開発を目指して欲しいと思います。シングルスレッドプログラムに対象を絞ったときは、
初めに、ディスク、つまり永続ストレージの特性と操作について、
次にデータ構造(主にアクセスメソッドとしてのインデクス)、
そして WAL について学んでもらいます。
ここまでを実装すると、クラッシュリカバリができるようになり、
最低限のトランザクション処理ができるデータベースシステムですよと主張できるようになります。

次のステップとして、逐次プログラミングでもできる Concurrency Control について
学んでもらおうと思っています。
これにより、ディスク IO の間に、別のトランザクションを実行できるようになります。
その先に、楽しい並列プログラミングの世界が待っています。



== 前提となる知識と経験

プログラミングをまったくやったことがない方は本書を読んでもチンプンカンプンとなる可能性が高いです。
なんでも構わないので、プログラムの書き方(変数だの関数だの分岐だのループだのファイル操作などなど)
に慣れ、基本的なデータ構造とアルゴリズム(配列、リスト、マップ、サーチ、ソート、などなど)
に慣れてからの方が良いでしょう。

プログラムの書き方について、具体的には、データの種類および入れ物である型と変数について、
処理の単位である関数について、分岐やループなどプログラムの構造について、
ファイル操作などの入出力について、ある程度知っていて慣れている必要があります。
C/C++ などを使う場合は、さらにポインタの使い方やヒープとスタックの違いについてなどを
知っていると良いでしょう。

基本的なアルゴリズムとデータ構造について、
Tree Map 構造と hash table 構造のインデクスとして使ったときの特性の違いだとか、
search と sort アルゴリズムだとか。分からなければ、必要に応じて学べば良いです。

開発に用いるプログラミング言語について。
データベースシステムは、C/C++ などのよりメモリや CPU を直接扱いやすい言語で書いてあることが多いですし、
最近ですと、Go や Java で書かれているものもあるようです。
もちろん、上記の言語を使わないとダメというわけではありません。
ただ、特にファイルの操作については、システムコールを使って説明することも多いので、
お使いのプログラミング言語でどのようにそれらの処理が抽象化されているかについては
ご自分で調べてください。



== 本書を読んだ後

皆さんには、本書で学んだことを生かして、いずれ、是非オリジナルの特徴を持った
データベースシステムの開発にチャレンジしていただきたいですし、
実用的なデータベースシステムを作る側の人になって活躍して欲しいです。
もちろん、データベースシステムを使う側の人になったとしても、
ここで得た知識は多いに役立つでしょう。
どのような仕組みになっているかを知らないで使うのと、知っていて使うのでは、大きな差が出ます。
データベースシステムの気持ちを知らない人は、データベースシステムをうまく使うことが出来ません。
また、研究の分野でもまだまだ課題はたくさんあり、
それらを解決に導く新しい手法を探求していって欲しいとも思います。

データベースシステムは、秘密にしなければならないデータを格納することも多いので、
データの漏洩や改竄をされないように厳重に守らなければなりません。
その第一歩は、バグを出来るだけ少なくするような設計実装であることはいうまでもありませんが、
データベースシステムそのものだけでなく、周辺環境、使う人達のことも含めて、
セキュリティには十分意識して頂きたいと思います。
