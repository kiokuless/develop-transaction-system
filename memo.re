= 雑多なメモ


本章では、雑多なコラムが押し込まれています。


====[column] トランザクショナルメモリについて

未執筆。
External consistency (Linearizaiblity 相当) の話。
Opacity の話。

====[/column]

====[column] Read-set と Write-set の管理について

未執筆。

====[/column]

====[column] ベンチマークソフトウェアについて

未執筆。YCSB やら TPC-C やら TPC-E やら、他にも。


====[/column]

====[column] In-memory DBMS と Disk-based DBMS の違い

未執筆。

====[/column]

====[column] 分散 DBMS について

未執筆。
合意の話について書く。(Replica) Consistency についての話も。

====[/column]


====[column] 論文を読む

未執筆。
主に国際会議を列挙する。読み方についてもついでに書く。

====[/column]


====[column] 読みやすいコードを書きましょう

プログラムコードは、機械が解釈し実行する側面(機械解釈)の他に、
他人もしくは明日の自分が読んで内容を理解したり修正する側面(人間解釈)があります。
だから、機械にとって明快(典型的にはコンパイル可能で、Undefined behavior がない)である
ことだけでなく、人間であるプログラマにとっても読みやすい必要があります。
趣味で書く使い捨てのコードなら可読性は必要ありません。
しかし、多くのコードは人間に読まれ、長く使うコードはメンテナンスが必須であることから、
可読性は生産性に直結する重要な要素です。アドホックに生成される例外的なものを除いて、
レビューなしで本番運用されるコードはまずありませんから、
仕事で書くコードは当然可読性に配慮する必要があります。

コーディングするときに可読性に配慮するとして、何に気をつけるべきでしょうか。
それは、文章執筆において読んでもらうための配慮と同じで、
対象読者が誤解するリスクを減らすことです。
まずは目的です。設計意図と言っても良いです。
自然言語による文章は構造を持ち、幹と枝葉の他に根という概念があります。
根は書いた人がそれを書いた目的です。
文章であれば根も自然言語で書いてしまえばよいのですが、コードではどうでしょうか。
少なくとも現代の常識では機械に目的や意図を共有する必要はないので、
根の部分はコードとして表現されていません。
コメントで目的を書きましょうとの教えは、これに対応するものです。
目的が伝われば、やっていることについて誤解されるリスクが減ります。

変数や関数、構造体などの名前は重要だと説かれます。
これも機械解釈には関係なく、コードを読んだ人間が、
コードが扱っているデータやその操作についてのモデル(抽象的な構造と操作)を理解しやすくするための工夫です。
名前の情報を使って読者の脳内で再現されるモデルがより正確であれば、
やっていることについて誤解されるリスクが減ります。

誤解されるリスクを減らすという原則を知っていれば、
文章執筆と同様コーディングにおいても、可読性について正解はないが気をつけるべき点があることが納得できるでしょう。
個々のテクニックについて説明されている有名な本として「リーダブルコード」(オライリー・ジャパン)があります。
私も持っていますし、オススメもしています。
機械に誤解なく解釈してもらうことがコーディングの第一義であるのはいうまでもありませんが、
人間にも誤解なく解釈してもらうための可読性の重要性についても分かってもらえたら幸いです。
文章と同じで、他人に読んでもらいフィードバックを受けること、
自分もまた他人のコードを読みフィードバックすること、
これらの実践の他に、本などで知識を入れていくことで、
読みやすいコードを書けるようになっていくと思います。


====[/column]
