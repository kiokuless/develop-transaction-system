= 管理されるデータ

データのそれ以上分解できない基本的な単位を考えましょう．
それは，例えば，整数であったり，文字列であったり，バイナリデータだったりというものです．
基本データ型とか primitive data type と呼んだりします．
ここで重要なのは，データの順序です．
1 は 2 より小さいですね．この順序が自然に定義されるものもあれば，
そうでないものもあります．一般には，全順序を考え，与えます．
(数の場合は，そのまま大小関係，文字列の場合は辞書式順序を考えることが多いです．)
順序を考えない(もしくは使わない)場合もあります．
具体的には範囲検索/指定を行わないということです．
その場合でも，等しい (equality) か等しくないかの判別は出来る必要があります．

一般にデータというものは，primitive data の集まりといえます．
そして，それらは構造を持っています．

プログラミング言語の用語を使うなら，
primitive data type に加えて，
構造体とポインタ(参照データ)型があれば，
考え得る任意のデータ構造を表現することが出来るでしょう．

Relational databse systems (関係データベースシステム，以後 RDBMS とかく)
と呼ばれるものは，ポインタを直接的には持たないのが特徴です．
代わりに，データとデータの関連を同じ部分データを持つことで表現します．
それは何故か，という問いには歴史的経緯があるようなので，興味のある人は調べてみてください．
(私も詳しくないですが，
http://leoclock.blogspot.com/2009/01/blog-post_07.html
によると，Readings in Database Systems の中の解説記事に，書いてあるようです．)

RDBMS では primitive data type を複数まとめて，record 型というものを定義して使います．
(record は，tuple と呼ばれることもあります．)
record 型の中でのひとつひとつの primitive data を区別するために，
それらを column とか field と呼び，名前がつけれられます．
Record 型は，プログラミング言語でいうところの構造体 (struct) に相当します．
struct を入れ子にする (nested) ことは想定されない場合が多いようです．
Record の集合を管理するために，table という概念が使われます．
ひとつの table には同じ record 型のデータが複数格納されます．

RDBMS では record 型が入れ子構造を持つことはあまりないです．
これは重複を防ぐための「正規形」の考え方があるためだと思われます．
「正規形」についてはここでは詳しく説明しません(し，私はそこまで詳しくありません．．)

ふたつの record が等価であるとは，もちろん全 column の data が等価であることは自明ですが，
様々な場面で record の区別をするときに key という概念が使われます．
Record のひとつもしくは複数の column をまとめて key として考えます．
以後，record 型 (table) の key と言ったときは，それに対応する複数 column を指すものとし，
具体的な record の key と言ったときは，具体的な key data を指すものとします．

Key の全順序を考える場合は辞書順を考えます．2 つの整数型からなる key があって，
(a, b) と表すとき，具体的な key の順序は例えば (1, 1) < (1, 2) < (2, 1) となります．
もちろん，任意の key について，任意の order を定義し得るわけですが，
自動的に決まる order として辞書順が採用されるシステムが多いです．

ひとつの table につき，複数の key を定義することができます(そしてそれぞれ名前をつけます)
特別なものとして record を特定するために，primary key という概念があり，
table 内での重複は許されないものがあります (uniqueness)．
明示的に primary key がない場合は，隠し column が用意され，
table 内で unique な整数が割り当てられ，システム内で区別されることが多いです．
ここでは，primary key は必須であるものとしましょう．

ある table について，任意の key を指定すれば，複数の record がマッチするわけです．
データベースからデータを取り出す最も基本的な操作が，ある table において
key data を与えて record 集合を取り出すことです．

RDBMS にはポインタがないと言ったが，データとデータの関連を表すにはどうすれば良いのか，
それは，ふたつもしくはそれ以上の record 型において，
同じ意味を持つ column(s) を持つことによって表現します．
R1, R2 という record 型があり，それぞれが C1 という column を持つものとします．
R1.C1 (R1 型における C1 column という意味) と R2.C1 が等価 (equal) である
レコード同士に関係を持たせる方法です．
同一 record 型 (もしくは 同一 table 内)の record 同士に関連を持たせたい場合は，
R1.C1 と R1.C2 という二つの column を定義しておいて，R1.C1 == R1.C2 という形で関係を持たせることができます．

なんだかまどろっこしい制約かも知れません．
ポインタは強力な道具ではありますが，その使用には，
dangling pointer の発生など，危険も伴います．
今はこれを受けいれて，先に進みましょう．

最も単純なデータベースは table がひとつしかなく，
record が key と value の 2 つの column で表現される key-value store です．
key は文字列型で，value はバイト列であることが多いです．
具体的にどういう意味を持たせるかについてシステムが感知しないことが多いです．



===[column] メモ

* 後で本文を分かりやすく修正する．

・「record型のkeyは複数columnのこと」とのことですが、うまく意味が理解できないです。recordのkeyというのは、あるcolumnに属するrecordに入っている値のことというのはわかったのですが。SQL文で言うWHERE id = '〇〇'のidがrecord型のkeyで〇〇がrecordのkeyというように、抽象と具体の対比みたいなことでしょうか？
・「Keyの全順序を…」のところなのですが、いまいちどういうことなのかわからないです。keyを複数個指定して、それに該当したrecordはそれぞれの要素に対して辞書順で並ぶってことさえわかればいいってことですか？2つのintで構成されるkeyというのは、データが構造体で入っているということなのか、それともintのkeyが2つあるということなのですか？


> ・「record型のkeyは複数columnのこと」とのことですが、うまく意味が理解できないです。recordのkeyというのは、あるcolumnに属するrecordに入っている値のことというのはわかったのですが。SQL文で言うWHERE id = '〇〇'のidがrecord型のkeyで〇〇がrecordのkeyというように、抽象と具体の対比みたいなことでしょうか？

そうですそうです。分かりにくくてすいません。
SQL の例では、id が key (のひとつ)で、○○は key data ですね。

例えば、ある record 型が、(name, age, score) の 3 columns で定義されているとき、name, age, score の任意の組み合わせ、すなわち
(name), (age), (score), (name, age), (age, score), (name, score), (name, age, score), ...(順番を考慮すればもっとたくさん)
の key の候補があります。(我々は、ある table を考えるとき、それらのたくさんある key 候補のうち、一部のみを実際に key として扱います。)
key という概念は、record を絞り込むためのもので、
r1 (alice, 18, 80)
r2 (bob, 20, 80)
r3 (cris, 20, 80)
r4 (dany, 20, 90)
という table (record 集合) があったときに、
(age, score) = (20, 80) を与えると r2 と r3 の record がマッチします(絞り込まれます)。
「具体的な record の key が。。。」という表現は、例えば (cris, 20, 80) という record の (age, score) key の値は (20, 80) ですよ、という意味です。。


> ・「Keyの全順序を…」のところなのですが、いまいちどういうことなのかわからないです。keyを複数個指定して、それに該当したrecordはそれぞれの要素に対して辞書順で並ぶってことさえわかればいいってことですか？2つのintで構成されるkeyというのは、データが構造体で入っているということなのか、それともintのkeyが2つあるということなのですか？

「Key の全順序」というのは、言葉が足りなかったかと思います。
「複数 column から成る Key の全順序」という意味です。
ひとつの column から成る key の全順序が決まっていたときに、複数 column から成る key の順序が辞書順として自然に決まる
ことが多いし、一般の RDBMS はそれを仮定するという意味です。。元々は、好きに順序は定義しても良いはずですが、

2 つの int で構成される key (column1, column2) の data は、(a, b) という形の data です。
 「データが構造体で入っている」ということです。(階層構造はあまり考えないので tuple 型と言った方が良いかも)

絞り込む、という点からすれば、
Key1: (age)
Key2: (score)
Key3: (age, score)
の 3 つの key があったとして、
(age, score) = (20, 80) の key data を与えて絞り込む (where age = 20 and score = 80 に相当) には、
(1) Key1 で絞り込む --> [r2, r3, r4]  --> Key2 で絞り込む --> [r2, r3]
(2) Key2 で絞り込む --> [r1, r2, r3]  --> Key1 で絞り込む --> [r2, r3]
(3) Key3 で絞り込む --> [r2, r3]
という 3 通りの絞り込み方があります。
なんでこんなややこしいことを考えるかというと、絞り込みを効率化するデータ構造として index というものがあり、
それをうまく使う余地があるからです。


===[/column]
